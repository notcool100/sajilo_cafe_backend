// <auto-generated />
using System;
using Cafe.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cafe.Infrastructure.Migrations
{
    [DbContext(typeof(CafeContext))]
    partial class CafeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cafe")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cafe.Infrastructure.Domain.Modals.Cafe.CafeM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<byte[]>("CafeLogo")
                        .HasColumnType("bytea")
                        .HasColumnName("cafelogo");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("Subscriptionid")
                        .HasColumnType("integer")
                        .HasColumnName("subscriptionid");

                    b.HasKey("Id")
                        .HasName("pk_cafes");

                    b.HasIndex("Subscriptionid")
                        .HasDatabaseName("ix_cafes_subscriptionid");

                    b.ToTable("cafes", "cafe");
                });

            modelBuilder.Entity("Cafe.Infrastructure.Domain.Modals.Cafe.Subscription", b =>
                {
                    b.Property<int>("Subscriptionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subscriptionid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Subscriptionid"));

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<int>("Durationmonths")
                        .HasColumnType("integer")
                        .HasColumnName("durationmonths");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Subscriptionname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subscriptionname");

                    b.HasKey("Subscriptionid")
                        .HasName("pk_subscriptions");

                    b.ToTable("subscriptions", "cafe");
                });

            modelBuilder.Entity("Cafe.Infrastructure.Domain.Modals.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CafeId")
                        .HasColumnType("uuid")
                        .HasColumnName("cafeid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("CafeId")
                        .HasDatabaseName("ix_employees_cafeid");

                    b.ToTable("employees", "cafe");
                });

            modelBuilder.Entity("Cafe.Infrastructure.Domain.Modals.Cafe.CafeM", b =>
                {
                    b.HasOne("Cafe.Infrastructure.Domain.Modals.Cafe.Subscription", "Subscription")
                        .WithMany("Caves")
                        .HasForeignKey("Subscriptionid")
                        .HasConstraintName("fk_cafes_subscriptions_subscriptionid");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Cafe.Infrastructure.Domain.Modals.Employees.Employee", b =>
                {
                    b.HasOne("Cafe.Infrastructure.Domain.Modals.Cafe.CafeM", "Cafe")
                        .WithMany("Employees")
                        .HasForeignKey("CafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_cafes_cafeid");

                    b.Navigation("Cafe");
                });

            modelBuilder.Entity("Cafe.Infrastructure.Domain.Modals.Cafe.CafeM", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Cafe.Infrastructure.Domain.Modals.Cafe.Subscription", b =>
                {
                    b.Navigation("Caves");
                });
#pragma warning restore 612, 618
        }
    }
}
