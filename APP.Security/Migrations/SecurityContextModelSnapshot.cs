// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Security.Infrastructure.Data;

#nullable disable

namespace Security.Infrastructure.Migrations
{
    [DbContext(typeof(SecurityContext))]
    partial class SecurityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("security")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Security.Infrastructure.Domain.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.Property<string>("HasChild")
                        .HasColumnType("text")
                        .HasColumnName("haschild");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<string>("MUrl")
                        .HasColumnType("text")
                        .HasColumnName("murl");

                    b.Property<string>("MenuIcon")
                        .HasColumnType("text")
                        .HasColumnName("menuicon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double?>("OrderNo")
                        .HasColumnType("double precision")
                        .HasColumnName("orderno");

                    b.Property<Guid?>("Parent")
                        .HasColumnType("uuid")
                        .HasColumnName("parent");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("ToolTip")
                        .HasColumnType("text")
                        .HasColumnName("tooltip");

                    b.HasKey("Id")
                        .HasName("pk_menu");

                    b.ToTable("menu", "security");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<Guid?>("ModuleRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("moduleroleid");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_module");

                    b.HasIndex("ModuleRoleId")
                        .HasDatabaseName("ix_module_moduleroleid");

                    b.ToTable("module", "security");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.ModuleRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("userroleid");

                    b.HasKey("Id")
                        .HasName("pk_modulerole");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_modulerole_userroleid");

                    b.ToTable("modulerole", "security");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.SubModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.PrimitiveCollection<int[]>("Functions")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("functions");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid")
                        .HasColumnName("menuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_submodule");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("ix_submodule_menuid");

                    b.ToTable("submodule", "security");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.SubModuleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.PrimitiveCollection<int[]>("Functions")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("functions");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("SubModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("submoduleid");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("userroleid");

                    b.HasKey("Id")
                        .HasName("pk_submodulefunction");

                    b.HasIndex("SubModuleId")
                        .HasDatabaseName("ix_submodulefunction_submoduleid");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_submodulefunction_userroleid");

                    b.ToTable("submodulefunction", "security");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.Property<string>("IP")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<bool?>("IsLoggedIn")
                        .HasColumnType("boolean")
                        .HasColumnName("isloggedin");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastloggedin");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<DateTime?>("LogInExpireTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loginexpiretime");

                    b.Property<string>("MAC")
                        .HasColumnType("text")
                        .HasColumnName("mac");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer")
                        .HasColumnName("userstatus");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "security");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Users.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userroles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userroles_userid");

                    b.ToTable("userroles", "security");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Users.UserStatusLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthBy")
                        .HasColumnType("text")
                        .HasColumnName("authby");

                    b.Property<string>("AuthDate")
                        .HasColumnType("text")
                        .HasColumnName("authdate");

                    b.Property<string>("AuthNo")
                        .HasColumnType("text")
                        .HasColumnName("authno");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletedate");

                    b.Property<string>("EntryBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entryby");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entrydate");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userstatus");

                    b.HasKey("Id")
                        .HasName("pk_userstatus");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userstatus_userid");

                    b.ToTable("userstatus", "security");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.Module", b =>
                {
                    b.HasOne("Security.Infrastructure.Domain.Role.ModuleRole", null)
                        .WithMany("Modules")
                        .HasForeignKey("ModuleRoleId")
                        .HasConstraintName("fk_module_modulerole_moduleroleid");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.ModuleRole", b =>
                {
                    b.HasOne("Security.Infrastructure.Domain.Users.UserRole", null)
                        .WithMany("ModuleRoles")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("fk_modulerole_userroles_userroleid");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.SubModule", b =>
                {
                    b.HasOne("Security.Infrastructure.Domain.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submodule_menu_menuid");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.SubModuleFunction", b =>
                {
                    b.HasOne("Security.Infrastructure.Domain.Role.SubModule", "SubModule")
                        .WithMany()
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submodulefunction_submodule_submoduleid");

                    b.HasOne("Security.Infrastructure.Domain.Users.UserRole", null)
                        .WithMany("SubModuleFunctions")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("fk_submodulefunction_userroles_userroleid");

                    b.Navigation("SubModule");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Users.UserRole", b =>
                {
                    b.HasOne("Security.Infrastructure.Domain.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userroles_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Users.UserStatusLog", b =>
                {
                    b.HasOne("Security.Infrastructure.Domain.Users.User", null)
                        .WithMany("StatusHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_userstatus_users_userid");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Role.ModuleRole", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Users.User", b =>
                {
                    b.Navigation("StatusHistory");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Security.Infrastructure.Domain.Users.UserRole", b =>
                {
                    b.Navigation("ModuleRoles");

                    b.Navigation("SubModuleFunctions");
                });
#pragma warning restore 612, 618
        }
    }
}
